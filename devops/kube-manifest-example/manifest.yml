apiVersion: v1
kind: ConfigMap
metadata:
  name: nginx-config
  namespace: 
data:
  nginx.conf: |
    worker_processes auto;
    pid /run/nginx.pid;
    include /usr/share/nginx/modules/*.conf;
    events {
        worker_connections 1024;
    }
    http {
        log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                          '$status $body_bytes_sent "$http_referer" '
                          '"$http_user_agent" "$http_x_forwarded_for"';
        sendfile            on;
        tcp_nopush          on;
        tcp_nodelay         on;
        keepalive_timeout   120;
        client_max_body_size 128M;
        types_hash_max_size 2048;
        include             /etc/nginx/mime.types;
        default_type        application/octet-stream;
        server_tokens off;

        server {
            listen       8092 default_server;
            listen       [::]:8092 default_server;
            server_name  _;
            client_max_body_size 128M;
            root /var/www/html/public;

            index index.php index.html;
            error_log  /dev/stdout;
            access_log /dev/stdout;

            location ~ [^/]\.php(/|$) {
                fastcgi_index index.php;
                try_files $uri =404;
                fastcgi_split_path_info ^(.+?\.php)(/.*)$;
                fastcgi_param REQUEST_URI $request_uri;
                fastcgi_param SCRIPT_FILENAME  $document_root$fastcgi_script_name;
                fastcgi_param HTTP_PROXY "";
                fastcgi_pass app-fpm:9000;
                include fastcgi_params;
            }
            location / {
              try_files $uri $uri/ /index.php?$query_string;
            location ~* ^.+\.(jpg|jpeg|gif|png|svg|js|css|mp3|ogg|mpe?g|avi|zip|gz|bz2?|rar|swf)$ {
            expires 1d;
            }
          }
        }
    }
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: supervisord-config
  namespace: 
data:
  supervisord.conf: |
    ; Sample supervisor config file.
    [unix_http_server]
    file=/var/run/supervisor/supervisor.sock   ; (the path to the socket file)
    ;chmod=0700                 ; sockef file mode (default 0700)
    ;chown=nobody:nogroup       ; socket file uid:gid owner
    ;username=user              ; (default is no username (open server))
    ;password=123               ; (default is no password (open server))

    ;[inet_http_server]         ; inet (TCP) server disabled by default
    ;port=127.0.0.1:9001        ; (ip_address:port specifier, *:port for all iface)
    ;username=user              ; (default is no username (open server))
    ;password=123               ; (default is no password (open server))

    [program:laravel-worker]
    process_name=%(program_name)s_%(process_num)02d
    command=php /var/www/html/artisan queue:work --queue=card_processing,excel_processing,default,site_processing --timeout=1800 --tries=3
    autostart=true
    autorestart=true
    stopasgroup=true
    killasgroup=true
    ;user=apache
    numprocs=4
    ;redirect_stderr=true
    stdout_logfile=/dev/stdout
    stdout_logfile_maxbytes=0
    stderr_logfile=/dev/stderr
    stderr_logfile_maxbytes=0
    ;stdout_events_enabled = true
    ;stderr_events_enabled = true
    stopwaitsecs=1799

    [program:laravel-worker-api]
    process_name=%(program_name)s_%(process_num)02d
    command=php /var/www/html/artisan queue:work --queue=upload_latest_data,upload_daily_data,upload_loop_data --timeout=1600 --tries=3
    autostart=true
    autorestart=true
    stopasgroup=true
    killasgroup=true
    ;user=apache
    ;user=root
    numprocs=4
    ;redirect_stderr=true
    stdout_logfile=/dev/stdout
    stdout_logfile_maxbytes=0
    stderr_logfile=/dev/stderr
    stderr_logfile_maxbytes=0
    ;stdout_events_enabled = true
    ;stderr_events_enabled = true
    stopwaitsecs=1500

    [program:laravel-worker-api-heavy]
    process_name=%(program_name)s_%(process_num)02d
    command=php /var/www/html/artisan queue:work --queue=upload_realization_data,upload_initial_data,reload_week_data --timeout=3500 --tries=3
    autostart=true
    autorestart=true
    stopasgroup=true
    killasgroup=true
    ;user=apache
    ;user=root
    numprocs=1
    ;redirect_stderr=true
    stdout_logfile=/dev/stdout
    stdout_logfile_maxbytes=0
    stderr_logfile=/dev/stderr
    stderr_logfile_maxbytes=0
    ;stdout_events_enabled = true
    ;stderr_events_enabled = true
    stopwaitsecs=3400

    [program:laravel-worker-report]
    process_name=%(program_name)s_%(process_num)02d
    command=php /var/www/html/artisan queue:work --queue=report_processing --timeout=1800 --tries=3
    autostart=true
    autorestart=true
    stopasgroup=true
    killasgroup=true
    ;user=apache
    ;user=root
    numprocs=2
    ;redirect_stderr=true
    stdout_logfile=/dev/stdout
    stdout_logfile_maxbytes=0
    stderr_logfile=/dev/stderr
    stderr_logfile_maxbytes=0
    ;stdout_events_enabled = true
    ;stderr_events_enabled = true
    stopwaitsecs=1799

    [program:laravel-worker-comments]
    process_name=%(program_name)s_%(process_num)02d
    command=php /var/www/html/artisan queue:work --queue=reviews_processing --timeout=600 --tries=3
    autostart=true
    autorestart=true
    stopasgroup=true
    killasgroup=true
    ;user=apache
    ;user=root
    numprocs=1
    ;redirect_stderr=true
    stdout_logfile=/dev/stdout
    stdout_logfile_maxbytes=0
    stderr_logfile=/dev/stderr
    stderr_logfile_maxbytes=0
    ;stdout_events_enabled = true
    ;stderr_events_enabled = true
    stopwaitsecs=600

    ;[program:cron]
    ;command = cron -f
    ;autostart = true
    ;autorestart = true
    ;stdout_events_enabled = true
    ;stderr_events_enabled = true
    ;stdout_logfile=/dev/fd/1
    ;stdout_logfile_maxbytes=0
    ;stderr_logfile = /dev/stderr
    ;stderr_logfile_maxbytes = 0

    [program:supercronic]
    command = supercronic /etc/cron.d/wb_cron
    autostart = true
    autorestart = true
    stdout_events_enabled = true
    stderr_events_enabled = true
    ;stdout_logfile=/dev/fd/1
    ;stdout_logfile_maxbytes=0
    ;stderr_logfile = /dev/stderr
    ;stderr_logfile_maxbytes = 0

    [supervisord]
    ;logfile=/etc/supervisor/logs/supervisord.log  ; (main log file;default $CWD/supervisord.log)
    ;logfile_maxbytes=50MB       ; (max main logfile bytes b4 rotation;default 50MB)
    ;stdout_events_enabled = true
    ;stderr_events_enabled = true
    stdout_logfile=/dev/stdout
    stdout_logfile_maxbytes=0
    stderr_logfile=/dev/stderr
    stderr_logfile_maxbytes=0
    ;logfile_backups=10          ; (num of main logfile rotation backups;default 10)
    ;loglevel=info               ; (log level;default info; others: debug,warn,trace)
    pidfile=/var/run/supervisord.pid ; (supervisord pidfile;default supervisord.pid)
    nodaemon=true              ; (start in foreground if true;default false)
    ;user=root
    minfds=1024                 ; (min. avail startup file descriptors;default 1024)
    minprocs=200                ; (min. avail process descriptors;default 200)
    ;umask=022                  ; (process file creation umask;default 022)
    ;user=chrism                 ; (default is current user, required if root)
    ;identifier=supervisor       ; (supervisord identifier, default is 'supervisor')
    ;directory=/tmp              ; (default is not to cd during start)
    ;nocleanup=true              ; (don't clean up tempfiles at start;default false)
    ;childlogdir=/tmp            ; ('AUTO' child log dir, default $TEMP)
    ;environment=KEY=value       ; (key value pairs to add to environment)
    ;strip_ansi=false            ; (strip ansi escape codes in logs; def. false)

    ; the below section must remain in the config file for RPC
    ; (supervisorctl/web interface) to work, additional interfaces may be
    ; added by defining them in separate rpcinterface: sections
    [rpcinterface:supervisor]
    supervisor.rpcinterface_factory = supervisor.rpcinterface:make_main_rpcinterface

    [supervisorctl]
    serverurl=unix:///var/run/supervisor/supervisor.sock ; use a unix:// URL  for a unix socket
    ;serverurl=http://127.0.0.1:9001 ; use an http:// url to specify an inet socket
    ;username=chris              ; should be same as http_username if set
    ;password=123                ; should be same as http_password if set
    ;prompt=mysupervisor         ; cmd line prompt (default "supervisor")
    ;history_file=~/.sc_history  ; use readline history if available

    ; The below sample program section shows all possible program subsection values,
    ; create one or more 'real' program: sections to be able to control them under
    ; supervisor.

    [program:php-fpm]
    command=/usr/local/sbin/php-fpm -c /usr/local/etc/php-fpm.conf             ; the program (relative uses PATH, can take args)
    ;process_name=%(program_name)s ; process_name expr (default %(program_name)s)
    ;numprocs=1                    ; number of processes copies to start (def 1)
    ;directory=/tmp                ; directory to cwd to before exec (def no cwd)
    ;stdout_events_enabled = true
    ;stderr_events_enabled = true
    stdout_logfile=/dev/stdout
    stdout_logfile_maxbytes=0
    stderr_logfile=/dev/stderr
    stderr_logfile_maxbytes=0
    ;umask=022                     ; umask for process (default None)
    ;priority=999                  ; the relative start priority (default 999)
    ;autostart=true                ; start at supervisord start (default: true)
    ;autorestart=true              ; retstart at unexpected quit (default: true)
    ;startsecs=10                  ; number of secs prog must stay running (def. 1)
    ;startretries=3                ; max # of serial start failures (default 3)
    ;exitcodes=0,2                 ; 'expected' exit codes for process (default 0,2)
    ;stopsignal=QUIT               ; signal used to kill process (default TERM)
    ;stopwaitsecs=10               ; max num secs to wait b4 SIGKILL (default 10)
    ;user=chrism                   ; setuid to this UNIX account to run the program
    ;redirect_stderr=true          ; redirect proc stderr to stdout (default false)
    ;stdout_logfile=/a/path        ; stdout log path, NONE for none; default AUTO
    ;stdout_logfile_maxbytes=1MB   ; max # logfile bytes b4 rotation (default 50MB)
    ;stdout_logfile_backups=10     ; # of stdout logfile backups (default 10)
    ;stdout_capture_maxbytes=1MB   ; number of bytes in 'capturemode' (default 0)
    ;stdout_events_enabled=false   ; emit events on stdout writes (default false)
    ;stderr_logfile=/a/path        ; stderr log path, NONE for none; default AUTO
    ;stderr_logfile_maxbytes=1MB   ; max # logfile bytes b4 rotation (default 50MB)
    ;stderr_logfile_backups=10     ; # of stderr logfile backups (default 10)
    ;stderr_capture_maxbytes=1MB   ; number of bytes in 'capturemode' (default 0)
    ;stderr_events_enabled=false   ; emit events on stderr writes (default false)
    ;environment=A=1,B=2           ; process environment additions (def no adds)
    ;serverurl=AUTO                ; override serverurl computation (childutils)

    ; The below sample eventlistener section shows all possible
    ; eventlistener subsection values, create one or more 'real'
    ; eventlistener: sections to be able to handle event notifications
    ; sent by supervisor.

    [eventlistener:stdout]
    command = supervisor_stdout
    buffer_size = 100
    events = PROCESS_LOG
    result_handler = supervisor_stdout:event_handler

    ;[eventlistener:theeventlistenername]
    ;command=/bin/eventlistener    ; the program (relative uses PATH, can take args)
    ;process_name=%(program_name)s ; process_name expr (default %(program_name)s)
    ;numprocs=1                    ; number of processes copies to start (def 1)
    ;events=EVENT                  ; event notif. types to subscribe to (req'd)
    ;buffer_size=10                ; event buffer queue size (default 10)
    ;directory=/tmp                ; directory to cwd to before exec (def no cwd)
    ;umask=022                     ; umask for process (default None)
    ;priority=-1                   ; the relative start priority (default -1)
    ;autostart=true                ; start at supervisord start (default: true)
    ;autorestart=unexpected        ; restart at unexpected quit (default: unexpected)
    ;startsecs=10                  ; number of secs prog must stay running (def. 1)
    ;startretries=3                ; max # of serial start failures (default 3)
    ;exitcodes=0,2                 ; 'expected' exit codes for process (default 0,2)
    ;stopsignal=QUIT               ; signal used to kill process (default TERM)
    ;stopwaitsecs=10               ; max num secs to wait b4 SIGKILL (default 10)
    ;user=chrism                   ; setuid to this UNIX account to run the program
    ;redirect_stderr=true          ; redirect proc stderr to stdout (default false)
    ;stdout_logfile=/a/path        ; stdout log path, NONE for none; default AUTO
    ;stdout_logfile_maxbytes=1MB   ; max # logfile bytes b4 rotation (default 50MB)
    ;stdout_logfile_backups=10     ; # of stdout logfile backups (default 10)
    ;stdout_events_enabled=false   ; emit events on stdout writes (default false)
    ;stderr_logfile=/a/path        ; stderr log path, NONE for none; default AUTO
    ;stderr_logfile_maxbytes=1MB   ; max # logfile bytes b4 rotation (default 50MB)
    ;stderr_logfile_backups        ; # of stderr logfile backups (default 10)
    ;stderr_events_enabled=false   ; emit events on stderr writes (default false)
    ;environment=A=1,B=2           ; process environment additions
    ;serverurl=AUTO                ; override serverurl computation (childutils)

    ; The below sample group section shows all possible group values,
    ; create one or more 'real' group: sections to create "heterogeneous"
    ; process groups.

    ;[group:thegroupname]
    ;programs=progname1,progname2  ; each refers to 'x' in [program:x] definitions
    ;priority=999                  ; the relative start priority (default 999)

    ; The [include] section can just contain the "files" setting.  This
    ; setting can list multiple files (separated by whitespace or
    ; newlines).  It can also contain wildcards.  The filenames are
    ; interpreted as relative to this file.  Included files *cannot*
    ; include files themselves.

    [include]
    files = supervisord.d/*.ini
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: platform
spec:
  replicas: 1
  selector:
    matchLabels:
      app: platform
  template:
    metadata:
      labels:
        app: platform
    spec:
      securityContext:
        fsGroup: 33
      initContainers:
        - name: migrator
          imagePullPolicy: IfNotPresent
          command:
            [
              "/bin/sh",
              "-c",
              "mkdir -p /var/www/html && cp -r /var/www/* /app/ && echo $pg_host >> /app/html/.env && echo $pg_pass >> /app/html/.env && echo $redis_host >> /app/html/.env && echo $redispass >> /app/html/.env && echo mongo=$mongo >> /app/html/.env  && echo rabbitmq=$rabbitmq >> /app/html/.env",
            ]
          volumeMounts:
            - name: www
              mountPath: /app
      containers:
        - name: backend
          imagePullPolicy: IfNotPresent
          command: ["/bin/bash", "/var/www/html/app_init.sh"]
          resources:
            requests:
              memory: "500Mi"
              cpu: "300m"
            limits:
              memory: "5Gi"
              cpu: "2000m"
          ports:
            - name: app
              containerPort: 9000
              protocol: TCP
          volumeMounts:
            - name: www
              mountPath: /var/www
            - name: storage
              mountPath: /var/www/html/storage/app/public/
            - name: images
              mountPath: /var/www/html/public/images/
            - name: supervisord-conf
              mountPath: /etc/supervisor/conf.d/supervisord.conf
              subPath: supervisord.conf
            - name: php-ini
              mountPath: /usr/local/etc/php/php.ini
              subPath: php.ini
        - name: nginx
          image: nginx:latest
          imagePullPolicy: IfNotPresent
          resources:
            requests:
              memory: "500Mi"
              cpu: "200m"
            limits:
              memory: "1Gi"
              cpu: "500m"
          ports:
            - containerPort: 8092
              name: nginx
              protocol: TCP
          volumeMounts:
            - name: www
              mountPath: /var/www
            - name: images
              mountPath: /var/www/html/public/images/
            - name: storage
              mountPath: /var/www/html/storage/app/public/
            - name: nginx-conf
              mountPath: /etc/nginx/nginx.conf
              subPath: nginx.conf
      volumes:
        - name: images
          persistentVolumeClaim:
            claimName: images
        - name: storage
          persistentVolumeClaim:
            claimName: storage
        - name: www
          emptyDir: {}
        - name: nginx-conf
          configMap:
            defaultMode: 420
            items:
              - key: nginx.conf
                path: nginx.conf
            name: nginx-config
        - name: superv
          emptyDir: {}
        - name: supervisord-conf
          configMap:
            defaultMode: 420
            items:
              - key: supervisord.conf
                path: supervisord.conf
            name: supervisord-config
        - name: php-ini
          configMap:
            defaultMode: 420
            items:
              - key: php.ini
                path: php.ini
            name: php-ini
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: storage
spec:
  accessModes:
    - ReadWriteMany
  storageClassName: cinder-multiattach
  resources:
    requests:
      storage: 15Gi

